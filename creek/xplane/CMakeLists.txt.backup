

cmake_minimum_required(VERSION 2.8.9)

project(x_interface)

# add required libraries
# all libraries are in /shared/hikey
INCLUDE_DIRECTORIES(
	./include
	./include/mm/include
	./include/xplane
	)

LINK_DIRECTORIES(
	/home/heejin/toolchains/aarch64/lib
	#	/shared/hikey/lib
	#	/shared/hikey/lib/aarch64-linux-gnu
	)


SET(SOURCE_NEON_SORT_MERGE
	../Sort-Merge/NEON-Sort-Merge/xplane_sort.c
	../Sort-Merge/NEON-Sort-Merge/xplane_sort_core.c
	../Sort-Merge/NEON-Sort-Merge/xplane_sort_x1.c
	../Sort-Merge/NEON-Sort-Merge/xplane_sort_x3.c
	../Sort-Merge/NEON-Sort-Merge/xplane_sort_x4.c
	../Sort-Merge/NEON-Sort-Merge/xplane_merge.c
	)

SET( SOURCE 
	../mm/batch.c
	./measure.c

	${SOURCE_NEON_SORT_MERGE}

	../xplane/xplane_interface.c
	../xplane/xplane_segment.c
	../xplane/xplane_uarray.c
	../xplane/xplane_filter.c
	../xplane/xplane_join.c
	../xplane/xplane_sumcount.c
	../xplane/xplane_median.c
	../xplane/xplane_misc.c
	../xplane/utils.c

	)

SET(CMAKE_SYSTEM_NAME Linux)
SET(CMAKE_SYSTEM_PROCESSOR aarch64)


######################## arm 32 bit #############################
#SET(COMPILER_PATH "/home/heejin/toolchains/aarch32/bin")
#SET(TARGET_ABI "linux-gnueabihf")
## specify the cross compiler
#SET(CMAKE_C_COMPILER "${COMPILER_PATH}/arm-${TARGET_ABI}-gcc")
##################################################################


######################## arm 64 bit #############################
SET(COMPILER_PATH "/home/heejin/toolchains/aarch64/bin")
SET(TARGET_ABI "linux-gnu")
# specify the cross compiler
SET(CMAKE_C_COMPILER "${COMPILER_PATH}/aarch64-${TARGET_ABI}-gcc")
##################################################################

SET(CMAKE_FIND_ROOT_PATH)
# search for programs in the build host directories
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# for libraries and headers in the target directories
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

#find_package(OpenMP)
#SET(CMAKE_C_FLAGS	"${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")	# set openmp

#SET(CMAKE_C_FLAGS	"${CMAKE_C_FLAGS} -Ofast -std=gnu99 -Wall")
SET(CMAKE_C_FLAGS	"${CMAKE_C_FLAGS} -O3 -std=gnu99 -Wall")
#SET(CMAKE_C_FLAGS	"${CMAKE_C_FLAGS} -fopenmp -pthread")	# set openmp
# SET(CMAKE_EXE_LINKER_FLAGS	"-fopenmp")
SET(CMAKE_C_FLAGS	"${CMAKE_C_FLAGS} -march=armv8-a -mtune=cortex-a53 -ftree-vectorize -fopenmp -ffast-math")

### for cortex a7
#SET(CMAKE_C_FLAGS	"${CMAKE_C_FLAGS} -mcpu=cortex-a7 -mfpu=neon-vfpv4 -ftree-vectorize -ffast-math -funsafe-math-optimizations")
#SET(CMAKE_C_FLAGS	"${CMAKE_C_FLAGS} -march=armv7-a -mfpu=neon -ftree-vectorize -ffast-math -funsafe-math-optimizations")


SET(CMAKE_C_FLAGS	"${CMAKE_C_FLAGS} -finline-functions")

#SET(CMAKE_EXE_LINKER_FLAGS	)

#FIND_LIBRARY(test NAMES libtest.a PATHS .)


ADD_SUBDIRECTORY(ubench)

ADD_LIBRARY(xplane STATIC
	${SOURCE}
	)

add_executable(neon.bin
	${SOURCE}
	main.c
	)

TARGET_LINK_LIBRARIES(neon.bin
	m
	#	${test}
	)
